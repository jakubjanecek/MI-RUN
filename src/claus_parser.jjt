/*---------------------------------------------------------------------------*
 * Options                                                                   *
 *---------------------------------------------------------------------------*/

 options {
  //DEBUG_PARSER = true;
  STATIC = false;
  MULTI = true;
}

/*---------------------------------------------------------------------------*
 * Parser                                                                    *
 *---------------------------------------------------------------------------*/

PARSER_BEGIN(Claus)

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Stack;
import vm.Util;
import vm.mm.*;

class Claus {
  public static final boolean DEBUG = true;
  public static MM mem;
  public static vm.ClausVM vim;
  public String className;
  public Pointer inputClass;
  public boolean inMethod = false;
  public boolean inDeclaration = false;
  public boolean inVarDeclaration = false;
  public boolean inExpression = false;
  public boolean isAssignment = false;
  public boolean isReturnVal = false;
  public boolean inFactor = false;
  public int fields = 0;
  public int localVars = 0;
  public ArrayList<Integer> methodList = new ArrayList<Integer>();
  public ArrayList<String> globalCodeLines = new ArrayList<String>();
  public ArrayList<String> codeLines = new ArrayList<String>();
  
  public static void main(String[] args) {
    try {
      // VM init
      int size = 1024;
      mem = new MM(size, size, size);
      vim = new vm.ClausVM(mem);
      
      // Input parsing
      Claus parser = new Claus(System.in);
      parser.Class();
      log();
      log("Parsing result: OK.");
    } catch (ParseException pe) {
      log("\nParse exception occured.", 4);
    } catch (TokenMgrError tme) {
      log("\nToken exception occured.", 4);
    } catch (Exception e) {
      log("\nException occured: " + e.getMessage(), 4);
    }
  }
  
  public static void log() {
    log("", 0);
  }
  
  public static void log(String msg) {
    log(msg, 1);
  }
  
  public static void log(String msg, int type) {
    if (DEBUG) {
      String prefix;
      switch (type) {
        case 1: {
          prefix = "[INFO]\t";
          break;
        }
        case 2: {
          prefix = "[DEBUG]\t";
          break;
        }
        case 3: {
          prefix = "[CODE]\t";
          break;
        }
        case 4: {
          prefix = "[ERROR]\t";
          break;
        }
        default: {
          prefix = "";
          break;
        }
      }
      System.out.println(prefix + msg);
    }
  }
}

PARSER_END(Claus)

/*---------------------------------------------------------------------------*
 * Grammar                                                                   *
 *---------------------------------------------------------------------------*/

/* Whitespaces */
SKIP: {
    " "
  | "\t"
  | "\n"
  | "\r"
}

/* Comments */
MORE:
{
    "//": IN_SINGLE_LINE_COMMENT
  | <"/**" ~["/"]> { input_stream.backup(1); }: IN_FORMAL_COMMENT
  | "/*": IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN:
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" >: DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN:
{
  <FORMAL_COMMENT: "*/" >: DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN:
{
  <MULTI_LINE_COMMENT: "*/" >: DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE:
{
  < ~[] >
}

/* Tokens */
TOKEN: {
    <CLASS_KW: "class">
  | <ENTRYPOINT_KW: "entry-point">
  | <DEF_KW: "def">
  | <VAR_KW: "var">
  | <RETURN_KW: "return">
  | <RETURN_VALUE_KW: "retval">
  | <NEW_KW: "new">
  | <FOR_KW: "for">
  | <FOR_ARROW_KW: "<-">
  | <WHILE_KW: "while">
  | <IF_KW: "if">
  | <ELSE_KW: "else">
  | <TRUE_KW: "true">
  | <FALSE_KW: "false">
  | <LBRACE: "{">
  | <RBRACE: "}">
  | <LPAREN: "(">
  | <RPAREN: ")">
  | <LBRACKET: "[">
  | <RBRACKET: "]">
  | <COLON: ":">
  | <SEMI: ";">
  | <COMMA: ",">
  | <PERIOD: ".">
  | <DECLARATION_EQUALS: "=">
  | <PLUS: "+">
  | <MINUS: "-">
  | <MULTIPLICATION: "*">
  | <DIVISION: "/">
  | <MODULO: "%">
  | <POWER: "^">
  | <EQUALS: "==">
  | <NOT_EQUALS: "!=">
  | <LT: "<">
  | <GT: ">">
  | <ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9"])*>
  | <STRING: "\""(~["\""])*"\"">
  | <INTEGER: (["0"-"9"])+>
}

/*---------------------------------------------------------------------------*
 * AST nodes                                                                 *
 *---------------------------------------------------------------------------*/

//* Class */
void Class():
{
  log("CLASS: BEGIN");
  Token t;
}
{
  <CLASS_KW> t=<ID>
  {
    className = t.image;
  } <LBRACE> ClassBody() <RBRACE>
  <EOF>
  {
    // Vytvoreni tridy v pameti VM
    inputClass = vim.newClazz(className, fields);
    // Vytvoreni metod v teto tride
    inputClass.$c().methods(vim.newMethodDictionary(methodList));
    log();
    for (String line : globalCodeLines) { log(line, 3); }
    log();
    /** /// Ziskani pointeru na radky kodu
    String[] codeArray = new String[globalCodeLines.size()];
    CodePointer cp = mem.storeCode(Util.translateBytecode(globalCodeLines.toArray(codeArray)));
    // Spusteni tridy ve VM
    vim.run(cp, localVars);/**/
    log("CLASS: END");
  }
}

//* Class body */
void ClassBody():
{
  //log("CLASS_BODY: BEGIN");
}
{
  (Declaration())*
  {
    //log("CLASS_BODY: END");
  }
}

//* Declaration */
void Declaration():
{
  //log("DECLARATION: BEGIN");
  inDeclaration = true;
  codeLines.clear();
}
{
    VariableDeclaration()
  | MethodDeclaration()
  | EntryPoint()
  {
    for (String line : codeLines) {
      globalCodeLines.add(line);
    }
    inDeclaration = false;
    //log("DECLARATION: END");
  }
}

//* Entry-point */
void EntryPoint():
{
  log("ENTRY_POINT: BEGIN");
  localVars = 0;
  // Zde uz musi byt znamy pocet fieldu i metod
  log("Number of fields: " + fields, 2);
  log("Number of methods: " + methodList.size(), 2);
}
{
  <ENTRYPOINT_KW> <LBRACE> MethodBody() <RBRACE>
  {
    log("ENTRY_POINT: END");
  }
}

/* Method declaration */
void MethodDeclaration():
{
  log("METHOD_DECLARATION: BEGIN");
  // zde uz musi byt znam finalni pocet fieldu
  localVars = 0;
  Token t;
}
{
  <DEF_KW> t=<ID> <LPAREN> MethodArgumentDeclarationList() <RPAREN> TypeSpecifier() <DECLARATION_EQUALS> <LBRACE>
    MethodBody()
  <RBRACE>
  {
    log("Number of local variables: " + localVars, 2);
    String[] codeArray = new String[codeLines.size()];
    CodePointer cp = mem.storeCode(Util.translateBytecode(codeLines.toArray(codeArray)));
    methodList.add(vim.newMethod(t.image, cp, localVars));
    log("METHOD_DECLARATION END");
  }
}

/* Method argument declaration list */
void MethodArgumentDeclarationList():
{
}
{
   [MethodArgumentDeclaration() MethodArgumentDeclarationListExt()]
}

/* Method argument declaration list extension */
void MethodArgumentDeclarationListExt():
{
}
{
  [<COMMA> MethodArgumentDeclarationList()]
}

/* Method argument declaration */
void MethodArgumentDeclaration():
{
}
{
  <ID> TypeSpecifier()
}

//* Method body */
void MethodBody():
{
  log("METHOD_BODY: BEGIN");
  inMethod = true;
}
{
  Block()
  {
    codeLines.add("return");
    inMethod = false;
    log("METHOD_BODY: END");
  }
}

//* Block */
void Block():
{
  log("BLOCK: BEGIN");
}
{
  (Statement())*
  {
    log("BLOCK: END");
  }
}

//* Variable declaration */
void VariableDeclaration():
{
  log("VAR_DECLARATION: BEGIN");
  inVarDeclaration = true;
  Token varName;
}
{
  <VAR_KW> varName=<ID> [TypeSpecifier()] <DECLARATION_EQUALS> Expression()
  {
    if (inMethod) {
      localVars++;
    } else {
      fields++;
    }
    inVarDeclaration = false;
    log("VAR_DECLARATION: END");
  }
}

//* Type specifier */
void TypeSpecifier():
{
  //log("TYPE: BEGIN");
  Token t;
}
{
  <COLON> t=<ID> [<LBRACKET> <RBRACKET>]
  {
    log("-> type " + t.image, 2);
    //log("TYPE: END");
  }
}

/* Statement */
void Statement():
{
  log("STATEMENT: BEGIN");
}
{
    LOOKAHEAD(2)
    MethodCall()
  | VariableDeclaration()
  | Assignment()
  | ReturnStatement()
  | ReturnValueStatement()
  | If()
  | While()
  | For()
  {
    log("STATEMENT: END");
  }
}

/* Expression */
void Expression():
{
  log("EXPRESSION: BEGIN");
  inExpression = true;
  Token t;
}
{
    LOOKAHEAD(2)
    MathExpression()
  | Instantiation()
  | (
      LOOKAHEAD(2)
      MethodCall()
    | Indexer()
    | t=<INTEGER> {
      if (inVarDeclaration) {
        if (inMethod) {
          codeLines.add("new-int " + t.image);
          codeLines.add("push-local " + localVars);
        } else {
          codeLines.add("new-int " + t.image);
          codeLines.add("push-int " + fields);
          codeLines.add("new-int " + mem.addConstant(t.image));
          codeLines.add("set-field");
        }
        log("var ? = " + t.image);
      }
      if (isReturnVal) {
        codeLines.add("new " + mem.addConstant(t.image));
        codeLines.add("return");
      }
    }
    | t=<TRUE_KW> {
      if (inVarDeclaration) {
        log("var ? = " + t.image);
      }
    }
    | t=<FALSE_KW> {
      if (inVarDeclaration) {
        log("var ? = " + t.image);
      }
    }
    | t=<STRING> {
      if (inVarDeclaration) {
        log("var ? = " + t.image);
      }
    }
  )
  {
    inExpression = false;
    log("EXPRESSION: END");
  }
}

/* Method call */
void MethodCall():
{
  log("METHOD_CALL: BEGIN");
  Token t;
}
{
    LOOKAHEAD(2)
    <ID> <PERIOD> t=<ID>{
      log("-> name = " + t.image, 2);
    } <LPAREN> [MethodArgumentList()] <RPAREN>
  | t=<ID>{
    log("-> name = " + t.image, 2);
  }  <LPAREN> [MethodArgumentList()] <RPAREN>
  {
    /*if (t.image == "println") {
      codeLines.add("new-str " + mem.addConstant("TODO..."));
      codeLines.add("syscall " + vm.Syscalls.calls2ints.get("print"));
    } else {
      */codeLines.add("pop-local " + localVars);
      codeLines.add("call " + mem.addConstant(t.image));
    //}
    log("METHOD_CALL: BEGIN");
  }
}

/* Mathod argument list */
void MethodArgumentList():
{}
{
  Expression() MethodArgumentListExtension()
  {
  }
}

/* Mathod argument list extension */
void MethodArgumentListExtension():
{}
{
  (<COMMA> Expression())*
  {
  }
}

//* Instantiation */
void Instantiation():
{
  log("INSTANTIATION: BEGIN");
  Token t;
}
{
  <NEW_KW> t=<ID> ArrayIndexing()
  {
    if (inVarDeclaration) {
      codeLines.add("new " + mem.addConstant(t.image));
      codeLines.add("return");
      log("new " + t.image, 2);
    }
    log("INSTANTIATION: END");
  }
}

/* Assignment */
void Assignment():
{
  log("ASSIGNMENT: BEGIN");
  isAssignment = true;
  Token t;
}
{
  t=<ID> ArrayIndexing() <DECLARATION_EQUALS> Expression()
  {
    log(t.image + " = <EXPRESSION>", 2);
    isAssignment = false;
    log("ASSIGNMENT: END");
  }
}

/* Return statement */
void ReturnStatement():
{
}
{
  <RETURN_KW>
  {
    codeLines.add("return");
  }
}

//* Return-value statement */
void ReturnValueStatement():
{
  isReturnVal = true;
}
{
  <RETURN_VALUE_KW> Expression()
  {
    isReturnVal = false;
  }
}

/* If condition */
void If():
{
  log("IF: BEGIN");
}
{
  <IF_KW> <LPAREN> Condition() <RPAREN> <LBRACE> Block() <RBRACE>
  [<ELSE_KW> <LBRACE> Block() <RBRACE>]
  {
    log("IF: END");
  }
}

/* While loop */
void While():
{
  log("WHILE: BEGIN");
}
{
  <WHILE_KW> <LPAREN> Condition() <RPAREN> <LBRACE> Block() <RBRACE>
  {
    log("WHILE: END");
  }
}

/* For loop */
void For():
{
  log("FOR: BEGIN");
}
{
  <FOR_KW> <LPAREN> ForDeclaration() <RPAREN> <LBRACE> Block() <RBRACE>
  {
    log("FOR: END");
  }
}

/* For loop declaration */
void ForDeclaration():
{
  Token t;
  //String s1;
  //String s2;
}
{
  t=<ID> <FOR_ARROW_KW> Expression() <PERIOD> <PERIOD> Expression()
  {
    log(t.image, 2);
  }
}

/* Contition */
void Condition():
{
  log("CONDITION: BEGIN");
  Token t;
  //String s1;
  //String s2;
}
{
  Expression() (t=<EQUALS> | t=<NOT_EQUALS> | t=<LT> | t=<GT>) Expression()
  {
    log("CONDITION: TYPE " + t.image, 2);
    log("CONDITION: END");
  }
}

/* Array */
void Indexer():
{
  log("INDEXER: BEGIN");
  Token t;
}
{
  t=<ID>{
    log(t.image + "[<ARRAY_INDEXING>]");
  }  ArrayIndexing()
  {
    log("INDEXER: END");
  }
}

/* Array indexing */
void ArrayIndexing():
{
  log("ARRAY_INDEXING: BEGIN");
}
{
  [<LBRACKET> Expression() <RBRACKET>]
  {
    log("ARRAY_INDEXING: END");
  }
}

/* Math expression */
void MathExpression():
{
  log("MATH_EXPRESSION: BEGIN");
}
{
  <LPAREN> Term() MathExpressionExt() <RPAREN>
  {
    log("MATH_EXPRESSION: END");
  }
}

/* Math expression extension */
void MathExpressionExt():
{
  log("MATH_EXPRESSION_EXT: BEGIN");
  String op = null;
}
{
  [(<PLUS>{ op="add"; } | <MINUS>{ op="subtract"; }) Term() MathExpressionExt()]
  {
    if (op != null) {
      log("call " + mem.addConstant(op), 2);
      codeLines.add("call " + mem.addConstant(op));
    }
    log("MATH_EXPRESSION_EXT: END");
  }
}

//* Term */
void Term():
{
  log("TERM: BEGIN");
}
{
  Factor() TermExt()
  {
    log("TERM: END");
  }
}

/* Term extension */
void TermExt():
{
  log("TERM_EXT: BEGIN");
}
{
  [(<MULTIPLICATION> | <DIVISION> | <MODULO> | <POWER>) Factor() TermExt()]
  {
    log("TERM_EXT: END");
  }
}

/* Factor */
void Factor():
{
  log("FACTOR: BEGIN");
  inFactor = true;
  Token t;
}
{
  t=<INTEGER> | t=<ID>{
    // t.image ~ nazev promenne!
    // -> z toho udelat lookup v hash-tabulce <index, nazev>
    // -> do promenne se pak priradi hodnota
    
    //log("new-int " + t.image, 2);
    //codeLines.add("new " + mem.addConstant(t.image));
    return;
  } | MathExpression()
  {
    inFactor = false;
    log("FACTOR: END");
  }
}
