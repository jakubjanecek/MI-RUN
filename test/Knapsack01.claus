class Knapsack {

  val capacity = 100
  val weights = new Integer[10]
  val prices = new Integer[10]
  val n = items.length()
  
  def numberToBinary(number : Int) : Boolean[] = {
    val binary = new Boolean[n]
    if (number == 0) {
      return binary
    }
    var rest = false
    var div = number
    var i = 0
    while (div > 0) {
      if ((div % 2) == 1) {
        rest = true
      }
      else {
        rest = false
      }
      div = (div / 2)
      binary[(n - i - 1)] = rest
      i = (i + 1)
    }
    return binary
  }
  
  def binaryToString(binary : Boolean[]) : String = {
    var string = ""
    val binLength = binary.length()
    for (i <- 0 .. (binLength - 1)) {
      if (true == binary[i]) {
        string = string.append(" 1")
      } else {
        string = string.append(" 0")
      }
    }
    return string
  }
  
  def solveKnapsackProblem() : Unit = {
    val p = (2 ^ n)
    var bestCombination = new Boolean[n]
    var maxWeight = 0
    var maxPrice = 0
    for (i <- 0 .. (p - 1)) {
      var actualWeight = 0
      var actualPrice = 0
      val actualCombination = numberToBinary(i)
      for (j <- 0 .. (n - 1)) {
        if (actualCombination[j] == true) {
          val weight = weights[j]
          val price = prices[j]
          if ((actualWeight + weight) < capacity) {
            actualWeight = (actualWeight + weight)
            actualPrice = (actualPrice + price)
          }
        }
      }
      if (actualPrice > maxPrice) {
        bestCombination = actualCombination
        maxWeight = actualWeight
        maxPrice = actualPrice
      }
    }
    val result = "kombinace:"
    result.append(binaryToString(bestCombination))
    result.append(" | vaha: ")
    result.append(maxWeight)
    result.append(" | cena: ")
    result.append(maxPrice)
    println(result)
  }
  
  def main(args: String[]): Unit = {
    solveKnapsackProblem()
  }
}
